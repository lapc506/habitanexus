import '../domain/entities/payment/payment_request.dart';
import '../domain/entities/payment/payment_result.dart';
import '../data/repositories/payment_repository_impl.dart';
import '../core/services/payment_router.dart';

/// Ejemplo de uso del sistema de pagos dual
/// Muestra c√≥mo se procesan diferentes tipos de pagos autom√°ticamente
class PaymentUsageExample {
  late PaymentRepositoryImpl _paymentRepository;

  PaymentUsageExample() {
    final paymentRouter = PaymentRouter();
    _paymentRepository = PaymentRepositoryImpl(paymentRouter);
  }

  /// Ejemplo: Inquilino paga dep√≥sito de garant√≠a
  /// Se procesa autom√°ticamente via Kindo + SINPE
  Future<void> processSecurityDeposit() async {
    final depositRequest = PaymentRequest(
      contractId: 'contract_123',
      amount: 450000, // ¬¢450,000 (supera l√≠mite SINPE M√≥vil)
      currency: 'CRC',
      payerId: 'tenant_456',
      payeeId: 'owner_789',
      type: PaymentType.deposit, // ‚Üí Autom√°ticamente usa Kindo
      metadata: {
        'property_id': 'prop_001',
        'deposit_type': 'security',
        'months_covered': 1,
      },
    );

    final result = await _paymentRepository.processPayment(depositRequest);

    if (result.isSuccessful) {
      print('‚úÖ Dep√≥sito procesado via SINPE: ${result.transactionId}');
      print('üí∞ Monto: ¬¢${result.amount.toStringAsFixed(0)}');
      print('üè¶ Red: SINPE Interbancaria');
    } else {
      print('‚ùå Error en dep√≥sito: ${result.errorMessage}');
    }
  }

  /// Ejemplo: Arrendador paga suscripci√≥n mensual SaaS
  /// Se procesa autom√°ticamente via ONVO Pay
  Future<void> processManagerSubscription() async {
    final subscriptionRequest = PaymentRequest(
      contractId: 'subscription_456',
      amount: 25000, // ¬¢25,000 mensual
      currency: 'CRC',
      payerId: 'manager_123',
      payeeId: 'platform_saas',
      type: PaymentType.saasSubscription, // ‚Üí Autom√°ticamente usa ONVO Pay
      metadata: {
        'plan': 'professional',
        'properties_limit': 50,
        'billing_cycle': 'monthly',
      },
    );

    final result = await _paymentRepository.processPayment(subscriptionRequest);

    if (result.isSuccessful) {
      print('‚úÖ Suscripci√≥n procesada: ${result.transactionId}');
      print('üí≥ Plan: Profesional');
      print('üìÖ Pr√≥ximo cobro: ${_getNextBillingDate()}');
    } else {
      print('‚ùå Error en suscripci√≥n: ${result.errorMessage}');
    }
  }

  /// Ejemplo: Pago mensual de renta con escrow
  /// Fondos retenidos hasta confirmaci√≥n de ambas partes
  Future<void> processMonthlyRentWithEscrow() async {
    final rentRequest = PaymentRequest(
      contractId: 'contract_123',
      amount: 350000, // ¬¢350,000 mensual
      currency: 'CRC',
      payerId: 'tenant_456',
      payeeId: 'owner_789',
      type: PaymentType.monthlyRent, // ‚Üí Kindo con escrow
      metadata: {
        'month': '2025-02',
        'property_address': 'San Jos√©, Costa Rica',
        'use_escrow': true,
      },
    );

    // Crear escrow primero
    final escrowResult = await _paymentRepository.createEscrow(rentRequest);

    if (escrowResult.isSuccessful) {
      print('üîí Escrow creado: ${escrowResult.transactionId}');
      print('‚è≥ Fondos retenidos hasta confirmaci√≥n');

      // Simular confirmaci√≥n despu√©s de algunos d√≠as
      await Future.delayed(Duration(seconds: 2));

      // Liberar fondos del escrow
      final releaseResult = await _paymentRepository.releaseEscrow(
        escrowResult.transactionId,
      );

      if (releaseResult.isSuccessful) {
        print('‚úÖ Fondos liberados al propietario');
        print('üìß Notificaciones enviadas a ambas partes');
      }
    }
  }

  /// Ejemplo: Obtener historial de pagos de un contrato
  Future<void> getPaymentHistory() async {
    final history = await _paymentRepository.getPaymentHistory('contract_123');

    print('\nüìä Historial de Pagos - Contrato 123:');
    for (final payment in history) {
      final provider = _getProviderName(payment);
      print(
        '${payment.timestamp.toString().substring(0, 10)} | '
        '¬¢${payment.amount.toStringAsFixed(0)} | '
        '$provider | ${payment.status.name}',
      );
    }
  }

  String _getProviderName(PaymentResult payment) {
    // Determina qu√© proveedor se us√≥ bas√°ndose en los datos
    if (payment.providerData.containsKey('sinpe_reference')) {
      return 'Kindo (SINPE)';
    } else if (payment.providerData.containsKey('subscription_id')) {
      return 'ONVO Pay';
    }
    return 'Desconocido';
  }

  String _getNextBillingDate() {
    final nextMonth = DateTime.now().add(Duration(days: 30));
    return '${nextMonth.day}/${nextMonth.month}/${nextMonth.year}';
  }
}

/// Funci√≥n principal para ejecutar ejemplos
void main() async {
  final example = PaymentUsageExample();

  print('üè† Sistema de Pagos Dual - Marketplace de Alquiler\n');

  // Ejemplo 1: Dep√≥sito de garant√≠a via Kindo/SINPE
  print('1Ô∏è‚É£ Procesando dep√≥sito de garant√≠a...');
  await example.processSecurityDeposit();

  print('\n2Ô∏è‚É£ Procesando suscripci√≥n SaaS...');
  await example.processManagerSubscription();

  print('\n3Ô∏è‚É£ Procesando renta mensual con escrow...');
  await example.processMonthlyRentWithEscrow();

  print('\n4Ô∏è‚É£ Consultando historial...');
  await example.getPaymentHistory();

  print('\n‚ú® Ejemplos completados');
}
